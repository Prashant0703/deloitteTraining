set serverout on
set verify off

declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees
    WHERE employee_id=&empid;
    
EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;


declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees 
    WHere employee_id IN(&empid);
    DBMS_output.put_line(vname||' '||vsal);
EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;



declare 
    emp_exist EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(-2292,emp_exist);
begin
    delete from departments
    where department_id=&deptid;
exception
    when emp_exist then
        dbms_output.put_line('cannot remove dept since emps exist');
end;
/
 



declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees
    WHERE employee_id=&empid;

EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;


declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees 
    WHere employee_id IN(&empid);
    DBMS_output.put_line(vname||' '||vsal);
EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;


declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees
    WHERE employee_id=&empid;

EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;


declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees 
    WHere employee_id IN(&empid);
    DBMS_output.put_line(vname||' '||vsal);
EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;
/

declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees
    WHERE employee_id=&empid;

EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;


declare 
    vname employees.last_name%TYPE;
    vsal employees.salary%TYPE;
BEGIN
    SELECT last_name,salary
    INTO vname,vsal
    FROM employees 
    WHere employee_id IN(&empid);
    DBMS_output.put_line(vname||' '||vsal);
EXCEPTION
    when no_data_found THEN
        DBMS_output.put_line('NO EMPS');
    When TOO_MANY_ROWS THEN
        DBMs_OUTPUT.PUT_LINE('MORE THAN ONE EMP');
END;



declare 
    emp_exist EXCEPTION;

    PRAGMA EXCEPTION_INIT(emp_exist,-2292);
begin
    delete from departments
    where department_id=&deptid;
exception
    when emp_exist then
        dbms_output.put_line('cannot remove dept since emps exist');
end;


--Age must be between 21 to 60 else raise exception

Declare
    v_age Number:=&age;
    invalid_age EXCEPTION;
begin
    if v_age not between 21 and 60 then
        RAISE invalid_age;
    else
        dbms_output.PUT_LINE('cONGRATS YOU ARE ELIGIBLE');
    END IF;
EXCEPTION
    WHEN INVALID_AGE THEN
        DBMS_OUTPUT.PUT_LINE('age MUST BE BETWEEN 21 TO 60');
    END;
/

--MOdified above 

Declare
    v_age Number:=&age;
    invalid_age EXCEPTION;
begin
    if v_age not between 21 and 60 then
        RAISE_APPLICATION_ERROR(-20111,'AGE must be 21-60');
    else
        dbms_output.PUT_LINE('CONGRATS YOU ARE ELIGIBLE');
    END IF;
EXCEPTION
    WHEN INVALID_AGE THEN
        DBMS_OUTPUT.PUT_LINE('age MUST BE BETWEEN 21 TO 60');
    END
    
    
/


begin
    delete from departments where department_id=240;
    dbms_output.put_line(SQL%ROWCOUNT||' rows deleted');
    end;
    /
    

-- declare cursors

cursor emp_cur
AS
Select last_name,sal,job_id
from employees;

--open cursors create an active set
 open emp_cur; --cannot print them here
 
 --fetch (points to the first row)(continue till set is empty using loop)
 fetch emp_cur
 into variable1;
 
 --close 
 close emp_cur;
 
 
 --cursor with basic loop
 
 declare
    cursor c1 is
    select last_name,job_id,salary
    from employees
    where salary between 5000 and 15000;
    
    erec c1%ROWTYPE;

begin
    open c1;
    loop
        fetch c1 into erec;
        exit when c1%notfound;
      dbms_output.put_line(erec.last_name||' '||erec.job_id||' '||erec.salary);
      
    end loop;
    close c1;
    end;
    
    --cursor with fro loop

declare
    cursor c1 is
    select last_name,job_id,salary
    from employees
    where salary between 5000 and 15000;

begin
    for erec in c1
    loop
         dbms_output.put_line(erec.last_name||' '||erec.job_id||' '||erec.salary);
    end loop;
end;

declare
    cursor c1 is
    select last_name,job_id,salary
    from employees
    where salary between 5000 and 15000
    for update nowait; -- wait 4(optional)
begin
    for erec in c1
    loop
         dbms_output.put_line(erec.last_name||' '||erec.job_id||' '||erec.salary);
         
         delete from emp2 where last_name='Higgins';
    end loop;
end;

sho parameter retention;







Create table emp2
as select * from employees;

select last_name from emp2;


delete from emp2 where salary>12000;
commit;


alter table emp2 enable row movement;
commit;
rollback;
flashback table emp2 to timestamp
to_timestamp('2019-12-31 12:38:40','yyyy-mm-dd hh24:mi:ss');

show recyclebin;

drop table emp2;

flashback table emp2  to before  drop;



/*-- syntax for creating procedures 
Create PROCEDURE procedurename
(paraeter1[mode]datatype1
...
)
is/as
PL/SQL block;
*/



create procedure inc_salary
(p_id IN emp2.employee_id%TYPE)
IS BEGIN
UPDATE emp2
SET salary=salary*1.10
Where employee_id=p_id;
END inc_salary;
/
desc inc_salary

select text from user_source
where name='INC_SALARY';

select salary from employees where employee_id IN(102,103);

exec inc_salary(103);
select salary from emp2 where employee_id=103;
rollback;
select employee_id,salary from emp2;

begin
    inc_salary(&empid);
end;
/


create procedure q1
(p_id IN emp2.employee_id%TYPE,
p_name OUT emp2.last_name%TYPE,
p_salary OUT emp2.salary%TYPE,
p_comm OUT emp2.commission_pct%TYPE)
IS 
BEGIN
SELECT last_name,salary,commission_pct
INTO p_name,p_salary,p_comm
from emp2
where employee_id=p_id;
END q1;
/

var x Varchar2(30)
var y number
var z number

exec q1(104,:x,:y,:z);
print x;

-
 - Procedure to change phone format
Create procedure format_phon(phno in out VARCHAR2)
IS 

    phno:='('||substr(phno,1,3)||')-'||substr(phno,4);
    end;

var a varchar2(20)
exec :a:='9873521680';

exec format_phon(:a);
print a;




--FUNCTIONS 

Create function add1(x number,y number)
return number
is
begin
return (x+y);
end;
/
var x number
exec :x:=add1(22,23);
print x;

select add1(22,354) from dual;

select add1(salary,1000) from emp2;

declare 
x number;
begin
x:=add1(&n1,&n2);
 dbms_output.put_line(x);
end;
/


--Triggers
 
 create table log_tab(username varchar2(30),dml_time timestamp,action varchar2(40));
desc log_tab;



create trigger emp_trig1
before delete on emp2
begin
    insert into log_tab
    values(user,current_timestamp,'b4 delete statement');
end;
    /
    
    

    
create trigger emp_trig2
before delete on emp2
for each row
begin
    insert into log_tab
    values(user,current_timestamp,'b4 delete row');
end;
/

create trigger emp_trig3
before delete on emp2
for each row
begin
    insert into log_tab
    values(user,current_timestamp,'after delete row');
end;
/

create trigger emp_trig4
after delete on emp2
begin
    insert into log_tab
    values(user,current_timestamp,'after delete statement');
end;
    /
desc emp2;
--delete first_name from emp2 where employee_id=000;

create or replace trigger t2
before insert or update or delete on emp2
begin
    if to_char(sysdate,'hh24')not between '9' and '18'
    or to_char(sysdate,'dy')in ('sat','sun')then
    raise_application_error(-20323,'do not work on offf days');
    end if;
end;

delete from emp2 where employee_id=107;

create table ex_emp1
as
select employee_id,last_name,job_id,phone_number
from emp2 where 1=2000;


drop trigger trig_bkp;

create trigger trig_bkp
before delete on emp2
for each row
begin
    insert into EX_EMP
    values(:old.employee_id,:old.last_name,:old.job_id,:old.phone_number);
end;
drop trigger del1;
drop trig 'ger t2;
delete from emp2 where employee_id=112;

    

create function test
(emp_id emp2.employee_id%TYPE)
return Number
is 
x number;
begin
SELECT salary+nvl((salary*commission_pct),0) from emp2 where emp_id=employee_id
INTO x;
return x;
end;

drop function test;
var x number
exec :x:=test(115);


create trigger test2
before insert on emp2
for each row
begin
    if(:new.salary<:old.salary)
    then
    raise_application_error(-20123,'new salary cannot be less than old salary');
    rollback;
    end if;
    end;
update emp2
set salary=salary-100
where employee_id=115;

select salary from emp2 where employee_id=115;
 

